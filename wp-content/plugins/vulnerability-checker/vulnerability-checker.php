<?php
/*
Plugin Name: Vulnerability Checker
Plugin URI: https://umairafzaluat.wixsite.com/profile
Description: A plugin to check for vulnerabilities and potential malware in WordPress plugins and themes.
Version: 1.3
Author: Umair Afzal
Author URI: https://umairafzaluat.wixsite.com/profile
License: GPL2
*/

// Prevent direct access to the file
if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Hook to add the admin menu
add_action('admin_menu', 'vc_add_admin_menu');

/**
 * Function to add the admin menu
 */
function vc_add_admin_menu()
{
    add_menu_page(
        'Vulnerability Checker', // Page title
        'Vulnerability Checker', // Menu title
        'manage_options',        // Capability required to access this menu
        'vulnerability-checker', // Menu slug
        'vc_admin_page',         // Function to display the page content
        'dashicons-shield',      // Icon for the menu
        20                      // Position in the menu
    );
}

// Enqueue plugin styles and scripts
add_action('admin_enqueue_scripts', 'vc_enqueue_scripts');

/**
 * Function to enqueue admin scripts and styles
 */
function vc_enqueue_scripts($hook)
{
    // Only enqueue on the vulnerability-checker page
    if ($hook !== 'toplevel_page_vulnerability-checker') {
        return;
    }

    wp_enqueue_style('vc-styles', plugin_dir_url(__FILE__) . 'css/styles.css');
    wp_enqueue_script('vc-scripts', plugin_dir_url(__FILE__) . 'js/scripts.js', array('jquery'), null, true);
}

/**
 * Function to display the admin page content
 */
function vc_admin_page()
{
    $outdated_plugins = vc_check_outdated_plugins();
    $outdated_themes = vc_check_outdated_themes();
    $vulnerable_plugins = vc_check_known_vulnerabilities('plugin');
    $vulnerable_themes = vc_check_known_vulnerabilities('theme');
    $malicious_files = vc_check_malicious_files();

?>
    <div class="wrap">
        <h1>Vulnerability Checker</h1>

        <h2>Outdated Plugins</h2>
        <ul>
            <?php if (!empty($outdated_plugins)): ?>
                <?php foreach ($outdated_plugins as $plugin): ?>
                    <li><?php echo esc_html($plugin); ?></li>
                <?php endforeach; ?>
            <?php else: ?>
                <li class="no-items">No outdated plugins found.</li>
            <?php endif; ?>
        </ul>

        <h2>Outdated Themes</h2>
        <ul>
            <?php if (!empty($outdated_themes)): ?>
                <?php foreach ($outdated_themes as $theme): ?>
                    <li><?php echo esc_html($theme); ?></li>
                <?php endforeach; ?>
            <?php else: ?>
                <li class="no-items">No outdated themes found.</li>
            <?php endif; ?>
        </ul>

        <h2>Known Vulnerabilities</h2>
        <h3>Plugins</h3>
        <ul>
            <?php if (!empty($vulnerable_plugins)): ?>
                <?php foreach ($vulnerable_plugins as $plugin): ?>
                    <li><?php echo esc_html($plugin); ?></li>
                <?php endforeach; ?>
            <?php else: ?>
                <li class="no-items">No known vulnerabilities found in plugins.</li>
            <?php endif; ?>
        </ul>

        <h3>Themes</h3>
        <ul>
            <?php if (!empty($vulnerable_themes)): ?>
                <?php foreach ($vulnerable_themes as $theme): ?>
                    <li><?php echo esc_html($theme); ?></li>
                <?php endforeach; ?>
            <?php else: ?>
                <li class="no-items">No known vulnerabilities found in themes.</li>
            <?php endif; ?>
        </ul>

        <h2>Malicious Files</h2>
        <ul>
            <?php if (!empty($malicious_files)): ?>
                <?php foreach ($malicious_files as $file): ?>
                    <li><?php echo esc_html($file); ?></li>
                <?php endforeach; ?>
            <?php else: ?>
                <li class="no-items">No malicious files detected.</li>
            <?php endif; ?>
        </ul>
    </div>
<?php
}

/**
 * Function to check for outdated plugins
 */
function vc_check_outdated_plugins()
{
    $plugins = get_plugins();
    $outdated_plugins = [];

    foreach ($plugins as $plugin => $plugin_data) {
        $plugin_slug = dirname($plugin); // Extract the plugin slug
        $latest_version = vc_get_latest_version('plugin', $plugin_slug);

        if (version_compare($plugin_data['Version'], $latest_version, '<')) {
            $outdated_plugins[] = $plugin_data['Name'] . ' (Current: ' . esc_html($plugin_data['Version']) . ', Latest: ' . esc_html($latest_version) . ')';
        }
    }

    return $outdated_plugins;
}

/**
 * Function to check for outdated themes
 */
function vc_check_outdated_themes()
{
    $themes = wp_get_themes();
    $outdated_themes = [];

    foreach ($themes as $theme) {
        $theme_slug = $theme->get('TextDomain'); // Extract the theme slug
        $latest_version = vc_get_latest_version('theme', $theme_slug);

        if (version_compare($theme->get('Version'), $latest_version, '<')) {
            $outdated_themes[] = $theme->get('Name') . ' (Current: ' . esc_html($theme->get('Version')) . ', Latest: ' . esc_html($latest_version) . ')';
        }
    }

    return $outdated_themes;
}

/**
 * Function to get the latest version of a plugin or theme
 */
function vc_get_latest_version($type, $slug)
{
    $version = '0.0'; // Default version if not found

    // Sanitize the slug to avoid any potential security issues
    $slug = sanitize_text_field($slug);

    if ($type === 'plugin') {
        // Fetch latest version of a plugin from WordPress.org
        $response = wp_remote_get("https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request[slug]=" . urlencode($slug));
        if (is_wp_error($response)) {
            return $version;
        }

        $data = json_decode(wp_remote_retrieve_body($response), true);
        if (isset($data['version'])) {
            $version = sanitize_text_field($data['version']);
        }
    } elseif ($type === 'theme') {
        // Fetch latest version of a theme from WordPress.org
        $response = wp_remote_get("https://api.wordpress.org/themes/info/1.2/?action=theme_information&request[slug]=" . urlencode($slug));
        if (is_wp_error($response)) {
            return $version;
        }

        $data = json_decode(wp_remote_retrieve_body($response), true);
        if (isset($data['version'])) {
            $version = sanitize_text_field($data['version']);
        }
    }

    return $version;
}

/**
 * Function to check for known vulnerabilities
 */
function vc_check_known_vulnerabilities($type)
{
    $vulnerable_items = [];
    $api_url = $type === 'plugin' ? 'https://wpvulndb.com/api/v3/plugins' : 'https://wpvulndb.com/api/v3/themes';

    $response = wp_remote_get($api_url);
    if (is_wp_error($response)) {
        return $vulnerable_items;
    }

    $data = json_decode(wp_remote_retrieve_body($response), true);
    $vulnerabilities = isset($data['vulnerabilities']) ? $data['vulnerabilities'] : [];

    if ($type === 'plugin') {
        $plugins = get_plugins();
        foreach ($plugins as $plugin => $plugin_data) {
            $plugin_slug = dirname($plugin);
            if (isset($vulnerabilities[$plugin_slug])) {
                $vulnerable_items[] = $plugin_data['Name'] . ' - Vulnerabilities: ' . implode(', ', array_column($vulnerabilities[$plugin_slug], 'title'));
            }
        }
    } elseif ($type === 'theme') {
        $themes = wp_get_themes();
        foreach ($themes as $theme) {
            $theme_slug = $theme->get('TextDomain');
            if (isset($vulnerabilities[$theme_slug])) {
                $vulnerable_items[] = $theme->get('Name') . ' - Vulnerabilities: ' . implode(', ', array_column($vulnerabilities[$theme_slug], 'title'));
            }
        }
    }

    return $vulnerable_items;
}

/**
 * Function to check for malicious files
 */
function vc_check_malicious_files()
{
    $malicious_files = [];

    // Example patterns for detecting malicious files (expand as needed)
    $malicious_patterns = [
        '/base64_decode\(/',
        '/eval\(/',
        '/exec\(/',
        '/shell_exec\(/',
        '/passthru\(/',
        '/system\(/',
        '/assert\(/',
    ];

    // Define directories to scan
    $directories = [
        WP_CONTENT_DIR . '/plugins/',
        WP_CONTENT_DIR . '/themes/'
    ];

    foreach ($directories as $dir) {
        $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));

        foreach ($files as $file) {
            if ($file->isFile()) {
                $file_content = file_get_contents($file->getRealPath());
                foreach ($malicious_patterns as $pattern) {
                    if (preg_match($pattern, $file_content)) {
                        $malicious_files[] = $file->getRealPath() . ' contains suspicious code.';
                        break;
                    }
                }
            }
        }
    }

    return $malicious_files;
}
